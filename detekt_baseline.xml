<?xml version="1.0" ?>
<SmellBaseline>
  <Blacklist timestamp="1526422183633"></Blacklist>
  <Whitelist timestamp="1535123065325">
    <ID>ComplexMethod:SchemaGenerator.kt$SchemaGenerator$private fun function(fn: KFunction&lt;*&gt;, target: Any? = null): GraphQLFieldDefinition</ID>
    <ID>DataClassContainsFunctions:SchemaGeneratorTest.kt$SchemaGeneratorTest.ResultWithFunction$fun repeat(n: Int)</ID>
    <ID>DataClassContainsFunctions:SchemaGeneratorTest.kt$SchemaGeneratorTest.ResultWithPrivateParts$private fun privateFunction(): Int</ID>
    <ID>FunctionOnlyReturningConstant:SchemaGeneratorTest.kt$SchemaGeneratorTest.QueryWithIgnored$fun query(): ResultWithIgnored?</ID>
    <ID>FunctionOnlyReturningConstant:SchemaGeneratorTest.kt$SchemaGeneratorTest.QueryWithPrivateParts$fun query(something: String): ResultWithPrivateParts?</ID>
    <ID>FunctionOnlyReturningConstant:SchemaGeneratorTest.kt$SchemaGeneratorTest.ResultWithPrivateParts$private fun privateFunction(): Int</ID>
    <ID>LargeClass:SchemaGenerator.kt$SchemaGenerator</ID>
    <ID>MethodOverloading:SchemaGeneratorTest.kt$SchemaGeneratorTest</ID>
    <ID>TooManyFunctions:SchemaGenerator.kt$SchemaGenerator</ID>
    <ID>UndocumentedPublicClass:CouldNotGetNameOfEnumException.kt$CouldNotGetNameOfEnumException : RuntimeException</ID>
    <ID>UndocumentedPublicClass:NestingNonNullTypeException.kt$NestingNonNullTypeException : RuntimeException</ID>
    <ID>UndocumentedPublicClass:NoopSchemaGeneratorHooks.kt$NoopSchemaGeneratorHooks : SchemaGeneratorHooks</ID>
    <ID>UndocumentedPublicClass:SchemaGenerator.kt$SchemaGenerator$Parameter</ID>
    <ID>UndocumentedPublicClass:SchemaGeneratorHooks.kt$SchemaGeneratorHooks</ID>
    <ID>UndocumentedPublicClass:TopLevelObjectDef.kt$TopLevelObjectDef</ID>
    <ID>UndocumentedPublicClass:TypeNotSupportedException.kt$TypeNotSupportedException : RuntimeException</ID>
    <ID>UndocumentedPublicFunction:GraphQLTypeExtensions.kt$// Creates a new builder by copying all the properties of the passed GraphQLFieldDefinition fun GraphQLFieldDefinition.newBuilder(): GraphQLFieldDefinition.Builder</ID>
    <ID>UndocumentedPublicFunction:toSchema.kt$// Entry point to generate a graphql schema using reflection on the passed objects fun toSchema( queries: List&lt;TopLevelObjectDef&gt;, mutations: List&lt;TopLevelObjectDef&gt; = emptyList(), config: SchemaConfig, hooks: SchemaGeneratorHooks = NoopSchemaGeneratorHooks() ): GraphQLSchema</ID>
    <ID>UnsafeCallOnNullableType:SchemaGenerator.kt$SchemaGenerator$name!!</ID>
    <ID>UnsafeCallOnNullableType:SchemaGenerator.kt$SchemaGenerator$type.arguments.first().type!!</ID>
    <ID>UnsafeCast:SchemaGenerator.kt$SchemaGenerator$graphQLTypeOf(fn.returnType) as GraphQLOutputType</ID>
    <ID>UnsafeCast:SchemaGenerator.kt$SchemaGenerator$graphQLTypeOf(parameter.type, true) as GraphQLInputType</ID>
    <ID>UnsafeCast:SchemaGenerator.kt$SchemaGenerator$graphQLTypeOf(prop.returnType) as GraphQLOutputType</ID>
    <ID>UnsafeCast:SchemaGenerator.kt$SchemaGenerator$graphQLTypeOf(prop.returnType, true) as GraphQLInputType</ID>
    <ID>UnsafeCast:SchemaGenerator.kt$SchemaGenerator$type.classifier as KClass&lt;*&gt;</ID>
    <ID>UnsafeCast:SchemaGeneratorTest.kt$SchemaGeneratorTest$query.type as GraphQLObjectType</ID>
    <ID>UnusedPrivateMember:SchemaGeneratorTest.kt$SchemaGeneratorTest.QueryWithInputEnum$someEnum: SomeEnum</ID>
    <ID>UnusedPrivateMember:SchemaGeneratorTest.kt$SchemaGeneratorTest.QueryWithInputObject$someObject: SomeObject</ID>
    <ID>UnusedPrivateMember:SchemaGeneratorTest.kt$SchemaGeneratorTest.ResultWithPrivateParts$private fun privateFunction(): Int</ID>
    <ID>UnusedPrivateMember:SchemaGeneratorTest.kt$SchemaGeneratorTest.ResultWithPrivateParts$private val privateSomething: String = "soPrivate"</ID>
    <ID>UseDataClass:TopLevelObjectDef.kt$TopLevelObjectDef</ID>
  </Whitelist>
</SmellBaseline>